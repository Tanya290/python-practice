#Table Structures
#We'll start by defining some basic table structures:

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10, 2),
    Stock INT
);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Address VARCHAR(200)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderItems (
    OrderItemID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    Status VARCHAR(20),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

#Stored Procedure
#A stored procedure to get all products:

DELIMITER //
CREATE PROCEDURE SelectAllProducts()
BEGIN
    SELECT * FROM Products;
END //
DELIMITER ;


#Function
#A function to calculate the total revenue generated by completed orders:

DELIMITER //
CREATE FUNCTION GetTotalRevenue() RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
    DECLARE totalRevenue DECIMAL(10, 2);
    SELECT SUM(p.Amount) INTO totalRevenue
    FROM Payments p
    JOIN Orders o ON p.OrderID = o.OrderID
    WHERE p.Status = 'Completed';
    RETURN totalRevenue;
END //
DELIMITER ;


#Cursor
#Using a cursor to iterate over all products and print their names:


DELIMITER //
CREATE PROCEDURE PrintProductNames()
BEGIN
    DECLARE productName VARCHAR(100);
    DECLARE done INT DEFAULT FALSE;
    DECLARE productCursor CURSOR FOR SELECT Name FROM Products;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN productCursor;

    getProductNames: LOOP
        FETCH productCursor INTO productName;
        IF done THEN
            LEAVE getProductNames;
        END IF;
        SELECT productName;
    END LOOP getProductNames;

    CLOSE productCursor;
END //
DELIMITER ;

#Examples of Execution and Dropping

#Executing Procedures

CALL SelectAllProducts();


#Dropping Procedures

DROP PROCEDURE IF EXISTS SelectAllProducts;


#Executing Functions

SELECT GetTotalRevenue();


#Dropping Functions

DROP FUNCTION IF EXISTS GetTotalRevenue;

#Example with IN Parameter
#A procedure to get product details by product ID:


DELIMITER //
CREATE PROCEDURE GetProductDetails(IN productID INT)
BEGIN
    SELECT * FROM Products WHERE ProductID = productID;
END //
DELIMITER ;

CALL GetProductDetails(1);


#Example with OUT Parameter
#A procedure to get the count of products:

DELIMITER //
CREATE PROCEDURE GetProductCount(OUT productCount INT)
BEGIN
    SELECT COUNT(*) INTO productCount FROM Products;
END //
DELIMITER ;

CALL GetProductCount(@productCount);
SELECT @productCount AS ProductCount;


#Practice Questions

#1.Procedure to select all products

   DELIMITER //
   CREATE PROCEDURE SelectAllProducts()
   BEGIN
       SELECT * FROM Products;
   END //
   DELIMITER ;
   
   CALL SelectAllProducts();


#2.Function to calculate total revenue for completed orders

   DELIMITER //
   CREATE FUNCTION GetTotalRevenue() RETURNS DECIMAL(10, 2)
   DETERMINISTIC
   BEGIN
       DECLARE totalRevenue DECIMAL(10, 2);
       SELECT SUM(p.Amount) INTO totalRevenue
       FROM Payments p
       JOIN Orders o ON p.OrderID = o.OrderID
       WHERE p.Status = 'Completed';
       RETURN totalRevenue;
   END //
   DELIMITER ;

   SELECT GetTotalRevenue();


#3.Procedure with IN parameter to retrieve product details

   DELIMITER //
   CREATE PROCEDURE GetProductDetails(IN productID INT)
   BEGIN
       SELECT * FROM Products WHERE ProductID = productID;
   END //
   DELIMITER ;

   CALL GetProductDetails(5);
 

#4.Procedure with OUT parameter to get the count of products

   DELIMITER //
   CREATE PROCEDURE GetProductCount(OUT productCount INT)
   BEGIN
       SELECT COUNT(*) INTO productCount FROM Products;
   END //
   DELIMITER ;

   CALL GetProductCount(@productCount);
   SELECT @productCount AS ProductCount;


#5.Using the predefined SUM() cursor to calculate the total price of all 'Electronics

   DELIMITER //
   CREATE PROCEDURE CalcTotalElectronicsPrice(OUT totalPrice DECIMAL(10, 2))
   BEGIN
       SELECT SUM(Price) INTO totalPrice
       FROM Products
       WHERE Category = 'Electronics';
   END //
   DELIMITER ;

   CALL CalcTotalElectronicsPrice(@total);
   SELECT @total AS TotalElectronicsPrice;


#6.Declare and use a cursor to print product names

   DELIMITER //
   CREATE PROCEDURE PrintProductNames()
   BEGIN
       DECLARE productName VARCHAR(100);
       DECLARE done INT DEFAULT FALSE;
       DECLARE productCursor CURSOR FOR SELECT Name FROM Products;
       DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

       OPEN productCursor;

       getProductNames: LOOP
           FETCH productCursor INTO productName;
           IF done THEN
               LEAVE getProductNames;
           END IF;
           SELECT productName;
       END LOOP getProductNames;

       CLOSE productCursor;
   END //
   DELIMITER ;
   